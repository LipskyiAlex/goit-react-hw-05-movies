{"version":3,"file":"static/js/736.3bc9c6b0.chunk.js","mappings":"gRAGaA,EAAOC,EAAAA,EAAAA,GAAH,4OAaJC,EAAOD,EAAAA,EAAAA,GAAH,mZAkBJE,EAAQF,EAAAA,EAAAA,GAAH,wEASLG,EAAWH,EAAAA,EAAAA,EAAH,gE,SCKrB,EA5Ca,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAOC,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,8GAESC,EAAAA,EAAAA,IAAYP,GAFrB,OAETQ,EAFS,OAGfJ,EAASI,GAHM,gDAKfC,QAAQC,IAAI,KAAMC,SALH,yDAAH,qDAShBL,GACD,GAAE,CAACN,IAEJ,IAAOY,EAAQT,EAARS,KAEP,OACE,yBACGA,GACC,SAACjB,EAAD,UACGiB,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,UAACpB,EAAD,YACE,gBACEqB,IAAG,yCAAoCD,GACvCE,IAAKJ,EAAMK,MAAM,MACjBC,QAAS,SAACC,GACNA,EAAEC,OAAOL,IAAM,kBAChB,KAEL,SAACpB,EAAD,UAAQiB,KACR,SAAChB,EAAD,UAAWiB,MATFF,EADH,OAeZ,wDAIP,C,iNC3CDU,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,kGAGoBH,EAAAA,EAAAA,IAAA,mCAAsCC,EAAtC,iBAAsDE,IAH1E,uBAGKC,EAHL,EAGKA,KAHL,kBAKIA,EAAKC,SALT,yDAQIC,IAAAA,OAAAA,QAAA,UACF,KAAMnB,QADJ,wCARJ,gFAcA,SAAeoB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,kGAKkBR,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,kBAAmDO,IALrE,uBAKIJ,EALJ,EAKIA,KALJ,kBAOIA,GAPJ,yDAUIE,IAAAA,OAAAA,QAAA,UACF,KAAMnB,QADJ,uCAVJ,gFAgBA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BnB,GAA5B,kGAEoBU,EAAAA,EAAAA,IAAA,gBAAmBV,EAAnB,oBAAiCW,IAFrD,uBAEKG,EAFL,EAEKA,KAFL,kBAIIA,GAJJ,yDAMIE,IAAAA,OAAAA,QAAA,UACF,KAAMnB,QADJ,wCANJ,gFAYA,SAAeJ,EAAtB,+CAAO,OAAP,oBAAO,WAA2BO,GAA3B,kGAEoBU,EAAAA,EAAAA,IAAA,gBACZV,EADY,4BACUW,IAH9B,uBAEKG,EAFL,EAEKA,KAFL,kBAMIA,GANJ,yDAQIE,IAAAA,OAAAA,QAAA,UACF,KAAMnB,QADJ,wCARJ,gFAeA,SAAeuB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BpB,GAA/B,kGAIsBU,EAAAA,EAAAA,IAAA,gBACRV,EADQ,4BACcW,IALpC,uBAIQG,EAJR,EAIQA,KAJR,kBAQQA,GARR,yDAUQE,IAAAA,OAAAA,QAAA,UACA,KAAMnB,QADN,wCAVR,gF","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/theMoiveApi.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\n\nexport const List = styled.ul`\n\n    display: grid;\n    max-width: calc(100vw - 48px);\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-gap: 16px;\n     margin: 0 auto;\n    padding: 0;\n    list-style: none;\n\n\n`\n\nexport const Item = styled.li`\n  \n color:inherit;\n\n transition: transform 0.2s ease;\n\n box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;\n \n :hover {\n\n    transform: scale(1.05);\n    font-weight: 500;\n\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n }\n\n`\n\nexport const Title = styled.h3`\n\n max-width:200px;\n text-align:center;\n\n\n\n`\n\nexport const SubTitle = styled.p`\nmax-width:200px;\ntext-align:center;\n\n`\n\n","import { getCastById } from '../../services/theMoiveApi';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {List,Item,Title,SubTitle} from './Cast.styled';\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState({});\n\n  useEffect(() => {\n    const fetchCasts = async () => {\n      try {\n        const castsData = await getCastById(movieId);\n        setCasts(castsData);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n  \n    fetchCasts();\n  }, [movieId]);\n\n  const {cast} = casts;\n\n  return (\n    <div>\n      {cast ? (\n        <List>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <Item key={id}>\n              <img\n                src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                alt={name} width='200'\n                onError={(e) => {\n                    e.target.src = '/placeholder.jpg'; \n                  }}\n              />\n              <Title>{name}</Title>\n              <SubTitle>{character}</SubTitle>\n            </Item>\n          ))}\n        </List>\n      ) : (\n        <p>Loading cast information...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'ffd1ae05d42dfac2dc67614233fe514e';\n\nexport async function getMovieTrends(currentPage) {\n  try {\n    \n    const { data } = await axios.get(`trending/all/day?api_key=${API_KEY}&page=${currentPage}`);\n\n    return data.results;\n    \n  } catch (error) {\n    return Notiflix.Notify.failure(\n      `${error.message}, please contact the administrator`\n    );\n  }\n}\n\nexport async function getMovieByQuery (query) {\n\n    \n  try {\n\n    const {data} = await axios.get(`search/movie?api_key=${API_KEY}&query=${query}`);\n\n    return data;\n  } catch (error) {\n\n    return Notiflix.Notify.failure(\n      `${error.message}, plese contact the administrator`\n    )\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n    \n    return data;\n  } catch (error) {\n    return Notiflix.Notify.failure(\n      `${error.message}, please contact the administrator`\n    );\n  }\n}\n\nexport async function getCastById(id) {\n  try {\n    const { data } = await axios.get(\n      `movie/${id}/credits?api_key=${API_KEY}`\n    );\n\n    return data;\n  } catch (error) {\n    return Notiflix.Notify.failure(\n      `${error.message}, please contact the administrator`\n    );\n  }\n}\n\n\nexport async function getReviewsById (id) {\n\n    try {\n\n        const {data} = await axios.get(\n            `movie/${id}/reviews?api_key=${API_KEY}`\n        )\n\n        return data;\n    } catch(error) {\n        return Notiflix.Notify.failure(\n            `${error.message}, please contact the administrator`\n          );\n    }\n}\n"],"names":["List","styled","Item","Title","SubTitle","movieId","useParams","useState","casts","setCasts","useEffect","fetchCasts","getCastById","castsData","console","log","message","cast","map","id","name","character","profile_path","src","alt","width","onError","e","target","axios","API_KEY","getMovieTrends","currentPage","data","results","Notiflix","getMovieByQuery","query","getMovieById","getReviewsById"],"sourceRoot":""}