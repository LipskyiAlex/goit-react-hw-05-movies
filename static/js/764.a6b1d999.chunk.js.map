{"version":3,"file":"static/js/764.a6b1d999.chunk.js","mappings":"uQA4FA,UAtFe,WACb,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAsCJ,EAAAA,EAAAA,UAAS,GAA/C,eAAOK,EAAP,KAAoBC,EAApB,KACA,GAAgCN,EAAAA,EAAAA,WAAS,GAAzC,eAAOO,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAeC,KAAS,SAAAC,GAExBL,GAKFK,EAAEC,OAAOC,gBAAgBC,cACtBH,EAAEC,OAAOC,gBAAgBE,UAAYC,OAAOC,aAC/C,KAGAZ,GAAe,SAAAa,GAAQ,OAAIA,EAAW,CAAf,GAE1B,GAAE,KAIH,OAFAC,SAASC,iBAAiB,SAAUX,GAE7B,WACLU,SAASE,oBAAoB,SAAUZ,EACxC,CACF,GAAE,CAACH,KAEJE,EAAAA,EAAAA,YAAU,WACR,GAAkB,IAAfJ,EAAH,CACA,IAAMkB,EAAa,mCAAG,WAAOC,EAAKvB,GAAZ,uFAElBO,GAAY,GAFM,UAGQiB,EAAAA,EAAAA,IAAgBxB,EAAMuB,GAH9B,OAIgB,KAD5BE,EAHY,QAIHC,QAAQC,QAErBC,EAAAA,OAAAA,QAAe,oCAEjBzB,GAAU,SAAA0B,GAAQ,wBAAQA,IAAR,OAAqBJ,EAAYC,SAAjC,IARA,gDAUlBI,QAAQC,IAAI,KAAMC,SAVA,yBAYlBzB,GAAY,GAZM,4EAAH,wDAenBe,EAAclB,EAAYJ,EAhBC,CAiB5B,GAAE,CAACI,EAAYJ,IAGhB,IAIMiC,EAAY,mCAAG,WAAMtB,GAAN,0EACnBA,EAAEuB,iBAEmB,KAAjBlC,EAAMmC,OAHS,yCAIVP,EAAAA,OAAAA,QAAe,yBAJL,uBAQjBvB,EAAe,GARE,UASOmB,EAAAA,EAAAA,IAAgBxB,EAAM,GAT7B,OASXoC,EATW,OAWjBjC,EAAUiC,EAAUV,SACpBnB,GAAY,GAZK,kDAcjBqB,EAAAA,OAAAA,QAAe,KAAMI,SAdJ,0DAAH,sDAoBlB,OACE,iCACE,kBAAMK,SAAUJ,EAAhB,WACE,kBAAOK,SAAU,SAAA3B,GAAC,OA3BH,SAAAA,GACnBV,EAASU,EAAEC,OAAO2B,MACnB,CAyB2BC,CAAa7B,EAAjB,EAAqB8B,KAAK,UAC5C,mBAAQC,KAAK,SAAb,SAAsB,eAExB,SAAC,IAAD,CAAYxC,OAAQA,MAGzB,C","sources":["pages/Movies.js"],"sourcesContent":["import { useState,useEffect } from 'react';\nimport { Notify } from 'notiflix';\nimport { getMovieByQuery } from '../services/theMoiveApi';\nimport  MoviesList from '../components/MoviesList/MoviesList';\nimport throttle from 'lodash.throttle';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [fetching, setFetching] = useState(true);\n\n  useEffect(() => {\n    const handleScroll = throttle(e => {\n\n      if (fetching) {\n        return;\n      } \n  \n      if (\n        e.target.documentElement.scrollHeight -\n          (e.target.documentElement.scrollTop + window.innerHeight) <\n        200\n      ) {\n\n        setCurrentPage(prevPage => prevPage + 1);\n      }\n    }, 1000);\n\n    document.addEventListener('scroll', handleScroll);\n\n    return function () {\n      document.removeEventListener('scroll', handleScroll);\n    };\n  }, [fetching]);\n\n  useEffect(() => {\n    if(currentPage ===1) return;\n    const fetchedMovies = async (page,query) => {\n      try {\n        setFetching(true);\n        const fetchedData = await getMovieByQuery(query,page);\n        if(fetchedData.results.length === 0) {\n\n          Notify.failure(\"We've found nothig by this query\");\n        }\n        setMovies(prevData => [...prevData, ...fetchedData.results]);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setFetching(false);\n      }\n    };\n    fetchedMovies(currentPage,query);\n  }, [currentPage,query]);\n\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (query.trim() === '') {\n      return Notify.failure(\"query can't be empty\");\n    }\n\n    try {\n      setCurrentPage(1)\n      const fetchData = await getMovieByQuery(query,1);\n     \n      setMovies(fetchData.results);\n      setFetching(false);\n    } catch (error) {\n      Notify.failure(error.message);\n    }\n  };\n\n\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input onChange={e => handleChange(e)} name=\"text\" />\n        <button type=\"submit\">Search</button>\n      </form>\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["useState","query","setQuery","movies","setMovies","currentPage","setCurrentPage","fetching","setFetching","useEffect","handleScroll","throttle","e","target","documentElement","scrollHeight","scrollTop","window","innerHeight","prevPage","document","addEventListener","removeEventListener","fetchedMovies","page","getMovieByQuery","fetchedData","results","length","Notify","prevData","console","log","message","handleSubmit","preventDefault","trim","fetchData","onSubmit","onChange","value","handleChange","name","type"],"sourceRoot":""}