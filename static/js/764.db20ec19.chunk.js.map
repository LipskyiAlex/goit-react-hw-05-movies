{"version":3,"file":"static/js/764.db20ec19.chunk.js","mappings":"wNAGaA,EAAOC,EAAAA,EAAAA,GAAH,+SAeJC,EAAOD,EAAAA,EAAAA,GAAH,mZAkBJE,EAAQF,EAAAA,EAAAA,EAAH,wE,SCjCLG,EAAa,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElBC,GAAWC,EAAAA,EAAAA,MACjB,OAEI,SAACP,EAAD,UACGK,EAAOG,KAAI,gBAAEC,EAAF,EAAEA,GAAGC,EAAL,EAAKA,MAAMC,EAAX,EAAWA,KAAKC,EAAhB,EAAgBA,YAAhB,OACR,SAACV,EAAD,WACC,UAAC,KAAD,CAAMW,GAAE,kBAAaJ,GAAMK,MAAO,CAACC,KAAKT,GAAxC,WACC,gBAAKU,IAAG,yCAAoCJ,GAAeK,IAAKP,GAAYC,EAAMO,MAAM,SACzF,SAACf,EAAD,UAAQO,GAAYC,QAHVF,EADH,KAYrB,C,0HCmBD,UAnCe,WACb,OAA0BU,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAeiB,EAAf,KAMMC,EAAY,mCAAG,WAAMC,GAAN,0EACnBA,EAAEC,iBAEmB,KAAjBL,EAAMM,OAHS,yCAIVC,EAAAA,OAAAA,QAAe,yBAJL,iCAQOC,EAAAA,EAAAA,IAAgBR,GARvB,OAQXS,EARW,OAUjBP,EAAUO,EAAUC,SAVH,kDAYjBH,EAAAA,OAAAA,QAAe,KAAMI,SAZJ,0DAAH,sDAgBlB,OACE,iCACE,kBAAMC,SAAUT,EAAhB,WACE,kBAAOU,SAAU,SAAAT,GAAC,OAvBH,SAAAA,GACnBH,EAASG,EAAEU,OAAOC,MACnB,CAqB2BC,CAAaZ,EAAjB,EAAqBb,KAAK,UAC5C,mBAAQ0B,KAAK,SAAb,SAAsB,eAExB,SAAC,IAAD,CAAYhC,OAAQA,MAGzB,C,sNCnCDiC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,kGAGoBH,EAAAA,EAAAA,IAAA,mCAAsCC,EAAtC,iBAAsDE,IAH1E,uBAGKC,EAHL,EAGKA,KAHL,kBAKIA,EAAKZ,SALT,yDAQIa,IAAAA,OAAAA,QAAA,UACF,KAAMZ,QADJ,wCARJ,gFAcA,SAAeH,EAAtB,+CAAO,OAAP,oBAAO,WAAgCR,GAAhC,kGAKkBkB,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,kBAAmDnB,IALrE,uBAKIsB,EALJ,EAKIA,KALJ,kBAOIA,GAPJ,yDAUIC,IAAAA,OAAAA,QAAA,UACF,KAAMZ,QADJ,uCAVJ,gFAgBA,SAAea,EAAtB,+CAAO,OAAP,oBAAO,WAA4BnC,GAA5B,kGAEoB6B,EAAAA,EAAAA,IAAA,gBAAmB7B,EAAnB,oBAAiC8B,IAFrD,uBAEKG,EAFL,EAEKA,KAFL,kBAIIA,GAJJ,yDAMIC,IAAAA,OAAAA,QAAA,UACF,KAAMZ,QADJ,wCANJ,gFAYA,SAAec,EAAtB,+CAAO,OAAP,oBAAO,WAA2BpC,GAA3B,kGAEoB6B,EAAAA,EAAAA,IAAA,gBACZ7B,EADY,4BACU8B,IAH9B,uBAEKG,EAFL,EAEKA,KAFL,kBAMIA,GANJ,yDAQIC,IAAAA,OAAAA,QAAA,UACF,KAAMZ,QADJ,wCARJ,gFAeA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAA+BrC,GAA/B,kGAIsB6B,EAAAA,EAAAA,IAAA,gBACR7B,EADQ,4BACc8B,IALpC,uBAIQG,EAJR,EAIQA,KAJR,kBAQQA,GARR,yDAUQC,IAAAA,OAAAA,QAAA,UACA,KAAMZ,QADN,wCAVR,gF","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Movies.js","services/theMoiveApi.js"],"sourcesContent":["import styled from \"@emotion/styled\"\n\n\nexport const List = styled.ul`\n\n    display: grid;\n    max-width: calc(100vw - 48px);\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-gap: 16px;\n    margin-top: 0;\n    margin-bottom: 0;\n    padding: 0;\n    list-style: none;\n    margin-left: auto;\n   margin-right: auto;\n\n`\n\nexport const Item = styled.li`\n  \n color:inherit;\n\n transition: transform 0.2s ease;\n\n box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;\n \n :hover {\n\n    transform: scale(1.05);\n    font-weight: 500;\n\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px, rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px, rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n }\n\n`\n\nexport const Title = styled.p`\n\n max-width:200px;\n text-align:center;\n\n\n\n`\n","import { Link,useLocation } from 'react-router-dom';\nimport {List,Item,Title} from './MoviesList.styled';\n\nexport const MoviesList = ({movies}) => {\n\n    const location = useLocation(); \n    return (    \n\n        <List>\n          {movies.map(({id,title,name,poster_path}) => (\n              <Item key={id}>\n               <Link to={`/movies/${id}`} state={{from:location}}>\n                <img src={`https://image.tmdb.org/t/p/w200${poster_path}`} alt={title?title:name} width='200'/>\n               <Title>{title?title:name}</Title>\n                </Link>\n              </Item>\n           ))}\n        </List>\n\n    )\n\n}","import { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport { getMovieByQuery } from '../services/theMoiveApi';\nimport { MoviesList } from '../components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (query.trim() === '') {\n      return Notify.failure(\"query can't be empty\");\n    }\n\n    try {\n      const fetchData = await getMovieByQuery(query);\n\n      setMovies(fetchData.results);\n    } catch (error) {\n      Notify.failure(error.message);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input onChange={e => handleChange(e)} name=\"text\" />\n        <button type=\"submit\">Search</button>\n      </form>\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'ffd1ae05d42dfac2dc67614233fe514e';\n\nexport async function getMovieTrends(currentPage) {\n  try {\n    \n    const { data } = await axios.get(`trending/all/day?api_key=${API_KEY}&page=${currentPage}`);\n\n    return data.results;\n    \n  } catch (error) {\n    return Notiflix.Notify.failure(\n      `${error.message}, please contact the administrator`\n    );\n  }\n}\n\nexport async function getMovieByQuery (query) {\n\n    \n  try {\n\n    const {data} = await axios.get(`search/movie?api_key=${API_KEY}&query=${query}`);\n\n    return data;\n  } catch (error) {\n\n    return Notiflix.Notify.failure(\n      `${error.message}, plese contact the administrator`\n    )\n  }\n}\n\nexport async function getMovieById(id) {\n  try {\n    const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n    \n    return data;\n  } catch (error) {\n    return Notiflix.Notify.failure(\n      `${error.message}, please contact the administrator`\n    );\n  }\n}\n\nexport async function getCastById(id) {\n  try {\n    const { data } = await axios.get(\n      `movie/${id}/credits?api_key=${API_KEY}`\n    );\n\n    return data;\n  } catch (error) {\n    return Notiflix.Notify.failure(\n      `${error.message}, please contact the administrator`\n    );\n  }\n}\n\n\nexport async function getReviewsById (id) {\n\n    try {\n\n        const {data} = await axios.get(\n            `movie/${id}/reviews?api_key=${API_KEY}`\n        )\n\n        return data;\n    } catch(error) {\n        return Notiflix.Notify.failure(\n            `${error.message}, please contact the administrator`\n          );\n    }\n}\n"],"names":["List","styled","Item","Title","MoviesList","movies","location","useLocation","map","id","title","name","poster_path","to","state","from","src","alt","width","useState","query","setQuery","setMovies","handleSubmit","e","preventDefault","trim","Notify","getMovieByQuery","fetchData","results","message","onSubmit","onChange","target","value","handleChange","type","axios","API_KEY","getMovieTrends","currentPage","data","Notiflix","getMovieById","getCastById","getReviewsById"],"sourceRoot":""}